import selenium.webdriver
from selenium.common.exceptions import NoSuchElementException
from framework.browser import Browser
from framework.webelement import WebElement
from framework.pages.elements.checkbox import CheckBox
from selenium.webdriver.chrome.options import Options


import os
import os.path
from collections import namedtuple

import numpy
import time
from math import factorial

from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

cap_map = {
    "firefox": DesiredCapabilities.FIREFOX.copy(),
    "internet explorer": DesiredCapabilities.INTERNETEXPLORER.copy(),
    "internetexplorer": DesiredCapabilities.INTERNETEXPLORER.copy(),
    "iexplorer": DesiredCapabilities.INTERNETEXPLORER.copy(),
    "ie": DesiredCapabilities.INTERNETEXPLORER.copy(),
    "chrome": DesiredCapabilities.CHROME.copy(),
    "opera": DesiredCapabilities.OPERA.copy(),
    "phantomjs": DesiredCapabilities.PHANTOMJS.copy(),
    "htmlunitjs": DesiredCapabilities.HTMLUNITWITHJS.copy(),
    "htmlunit": DesiredCapabilities.HTMLUNIT.copy(),
    "iphone": DesiredCapabilities.IPHONE.copy(),
    "ipad": DesiredCapabilities.IPAD.copy(),
    "android": DesiredCapabilities.ANDROID.copy(),
    "edge": DesiredCapabilities.EDGE.copy(),
    "safari": DesiredCapabilities.SAFARI.copy()
}
"""
c=[]
c = Config()
c.prepare()
print(c.__dict__["_data"])
print(os.environ.items())
if "OUTPUT_DIR" in os.environ.keys():
    print("output dir already exists", str(os.environ["OUTPUT_DIR"])[-19:])

if isinstance(c, Config) and hasattr(c, "_data"):
    print("c has data")
    print(len(c.__dict__['_data']))
else:
    print("config not prepared")"""
'''
array_size = 10
number = 10
a = numpy.random.randint(10, size=array_size)
#a=[1,3,6,2,0,4,5,6,1,7]
print(a)
for i in range(array_size-1):
    if a[i]+a[i+1] == number:
        print(a[i], '\t', a[i+1], '\t', "summ equals %s\n" % number)

y = 1
print("y = %s" % y)
def fibR(n):
    if n==0:
        return 0
    elif n==1 or n==2:
        return 1
    else:
        return fibR(n-1)+fibR(n-2)
print("fibo of %s with recursion = " % y, fibR(y))

fibo_array=[]
def fibY(n):
    a,b=0,1
    for i in range(n):
        a,b=b,a+b
        yield a
for x in fibY(y):
    fibo_array.append(x)
print("fibo array of %s with generator = " % y, fibo_array)

def fibN(n):
    a,b=0,1
    for i in range(n):
        a,b=b,a+b
    return a
print("fibo of %s easy = " % y, fibN(y))

def factorial1(x):
    result = 1
    for i in range(2, x + 1):
        result *= i
    return result

def factorial2(n):
    num = 1
    while n >= 1:
        num = num * n
        n = n - 1
    return num

print(factorial1(y), factorial2(y), factorial(y))'''


caps = cap_map['chrome']
br_conf = {"type": "chrome", "profiles": {"darwin": "", "headless": ""}, 'grid filters': {'platform': 'mac', 'version': '23.0.1'}}
conf = {'selenium': {'timeout': 30, 'executor': {'host': '10.0.0.215', 'port': 5555, 'is grid': False}, 'proxy': {'url': '', 'type': ''}}, 'browser': {'type': 'chrome', 'profiles': {'darwin': None, 'profile': None}, 'grid filters': {'platform': 'mac', 'version': '23.0.1'}}, 'sframe': {'base': 'D:\\PROJECTS\\AMAZON', 'default_browser': 'rabbit', 'ci_type': 'jenkins', 'screenshots': {'on_failure': False, 'on_error': True, 'on_finish': False}}}
browser = Browser(br_conf, conf)
browser.driver.get('https://www.amazon.com')
browser.driver.find_element_by_locator("css=input#twotabsearchtextbox").send_keys("ipad air 2 case")
browser.driver.find_element_by_locator("css=input.nav-input[value='Go']").click()
el = CheckBox(browser.driver, ("css=input[name='s-ref-checkbox-8080061011'][type='checkbox']"))
print(str(el.__get__()))
time.sleep(3)
el = browser.driver.find_element_by_locator("css=#low-price")
el.clear()
el.send_keys("20")
el = browser.driver.find_element_by_locator("css=#high-price")
el.clear()
el.send_keys("100")
browser.driver.find_element_by_locator('css=input.a-button-input[type="submit"][value="Go"]').click()
els = browser.driver.find_elements_by_locator('css=li[id^="result"][class*="result"]')
print(len(els))
listofcases = namedtuple('Case', 'name link price rating')
cases = [None]*len(els)
cases[0] = listofcases(name="case1", price=9.99, rating=4.4, link='www.amazon.com')
prices=[]
ratings=[]
hrefs=[]
names=[]
case_materials = []
refine_search_dict = {}
left_nav_sections=browser.driver.find_elements_by_locator("css=#leftNavContainer>h3")
refine_search_by_titles=browser.driver.find_elements_by_locator("css=#leftNavContainer>h4")
refine_search_by_options=browser.driver.find_elements_by_locator("css=#leftNavContainer>ul.a-unordered-list")
print(refine_search_by_options)
i=0
'''for ss in refine_search_by_options:
    print(refine_search_by_options[i])
    sss = refine_search_by_options[i].find_element_by_locator("xpath=./following-sibling::*ul/div/li").text
    print(sss)
    i += 1'''
print("max number of lists = ", len(refine_search_by_titles))

if not refine_search_dict:
    print("not refine search dict available")
for nav_section in left_nav_sections:
    print("nav section = ", nav_section.text)
    if nav_section.text.lower() == "refine by":
        print('found refine by')
        for search_title in refine_search_by_titles:
            i = 1
            title = WebElement(search_title).text.lower()
            refine_search_dict[title] = []
            print("found title %s" % title)
            try:
                option = WebElement(search_title).find_element_by_locator("xpath=following-sibling::*[1]/div/li/span/span/div/label/span/i").get_attribute("class")
                if "prime" in option:
                    print("found prime")
                    refine_search_dict[title].append("prime")
            except NoSuchElementException:
                try:
                    list_options = WebElement(search_title).find_elements_by_locator("xpath=following-sibling::*[1]/div/li/span")
                   # list_options = WebElement(search_title).find_elements_by_locator("xpath=following-sibling::*[1]/div/li/span")
                    print("found usual list")
                    for option in list_options:
                        refine_search_dict[title].append(option.text.lower())
                        i += 1
                        print("option : %s " % option.text)
                except NoSuchElementException:
                    print("exception")

                    """option = WebElement(search_title).find_element_by_locator("xpath=following-sibling::*[1]/div/li/span/a/span")
                    print(option.text)
                    if not option.text.lower().endswith("& Up"):
                        refine_search_dict[title][i] = option.text.lower()
                        print("found ipad without input checkbox")"""



if "soft" in refine_search_dict["case material attributes"]:
    print("case is soft")

if "moko" in refine_search_dict["brand"]:
    print("moko in brand")

if "rubber" in refine_search_dict["case material"]:
    print("rubber in case materials")

print("refine search dict %s" % refine_search_dict)
'''
lists = browser.driver.find_elements_by_locator("css=#leftNavContainer>h4")
for list in lists:
    list_title = list.text
    print(list_title)
    if list_title.lower() == "case material":
        print("case material found")
        els2=list.find_elements_by_locator("css=h4+ul>div>li")
        for el in els2:
            print(el.find_elements_by_locator("css=span>span>div>label>span>span").text)
        #els2 = list.find_elements_by_locator("css=h4+ul>div>li>span>span>div>label>span>span")
        #h4 + ul > div > li > span > span > div > label > span > span
        #els2 = list.find_elements_by_locator("xpath=./following-sibling::ul/div/li/span/span/div/label/span/span")
        case_materials = [WebElement(x).get_attribute("innerHTML").lower() for x in els2]

'''
#print(case_materials)
"""
for el in els:
    ele = el.find_element_by_locator("css=a.a-link-normal.s-access-detail-page.s-color-twister-title-link.a-text-normal")
    name=ele.get_attribute("title")
    href=ele.get_attribute("href")
    print(name, href)
    names.append(name)
    hrefs.append(href)
    try:
        ele = el.find_element_by_locator("css=span.a-offscreen")

 #       ele = el.find_element_by_css_selector("div>div:nth-child(4)>div:nth-child(1)>a>span.a-offscreen")
        price = ele.get_attribute("innerHTML")
    except NoSuchElementException:
        price = "No Amazon price"

    try:
        ele = el.find_element_by_locator("css=span>span>a>i>span")
        rating = ele.get_attribute("innerHTML")
    except NoSuchElementException:
        rating = "No rating yet"
    finally:
        print("rating = ", rating)
        print("price = ", price)
        ratings.append(rating)
        prices.append(price)
"""
print(len(prices))
print(prices)
print(len(ratings))
print(ratings)
print(cases)

browser.driver.quit()
'''

#tc.setup_class()
#tc.setup_method(classmethod)
#print("len is - ", len(os.environ["OUTPUT_DIR"]))
if "OUTPUT_DIR" in os.environ.keys():
    print("length is not null, output dir is created")
    tc.take_numbered_screenshot()
    print(len(os.environ["SCREENSHOTS_DIR"]))
    tc.take_numbered_screenshot()
    print(tc.config)
else:
    raise Exception("configure error") '''

